// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycel/registry/network_name.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkName int32

const (
	NetworkName_NO_NETWORK NetworkName = 0
	// BTC 1xxx
	NetworkName_BITCOIN_MAINNET_MAINNET NetworkName = 10000
	NetworkName_BITCOIN_TESTNET_TESTNET NetworkName = 10001
	// EVM 2xxxx
	// Etheruem
	NetworkName_ETHEREUM_MAINNET_MAINNET NetworkName = 20000
	NetworkName_ETHEREUM_TESTNET_GOERLI  NetworkName = 20001
	NetworkName_ETHEREUM_TESTNET_SEPOLIA NetworkName = 20002
	// Polygon
	NetworkName_POLYGON_MAINNET_MAINNET NetworkName = 20003
	NetworkName_POLYGON_TESTNET_MUMBAI  NetworkName = 20004
	// BNB Chain
	NetworkName_BNB_MAINNET_MAINNET NetworkName = 20005
	NetworkName_BNB_TESTNET_TESTNET NetworkName = 20006
	// Avalanche
	NetworkName_AVALANCHE_MAINNET_CCHAIN NetworkName = 20007
	NetworkName_AVALANCHE_TESTNET_FUJI   NetworkName = 20008
	// Gnosis
	NetworkName_GNOSIS_MAINNET_MAINNET NetworkName = 20009
	NetworkName_GNOSIS_TESTNET_CHIADO  NetworkName = 20010
	// Optimism
	NetworkName_OPTIMISM_MAINNET_MAINNET NetworkName = 20011
	NetworkName_OPTIMISM_TESTNET_GOERLI  NetworkName = 20012
	// Arbitrum
	NetworkName_ARBITRUM_MAINNET_MAINNET NetworkName = 20013
	NetworkName_ARBITRUM_TESTNET_GOERLI  NetworkName = 20014
	//Shardeum
	// SHARDEUM_MAINNET_ = 20015;
	// SHARDEUM_TESTNET_ = 20016;
	NetworkName_SHARDEUM_BETANET_SPHINX NetworkName = 20017
	// Zetachain
	// ZETA_MAINNET_MAINNET = 20018;
	NetworkName_ZETA_TESTNET_ATHENS NetworkName = 20019
	// MOVE 3xxxx
	//Aptos
	NetworkName_APTOS_MAINNET_MAINNET NetworkName = 30000
	NetworkName_APTOS_TESTNET_TESTNET NetworkName = 30001
	// Sui
	NetworkName_SUI_MAINNET_MAINNET NetworkName = 30002
	NetworkName_SUI_TESTNET_TESTNET NetworkName = 30003
	// SOLANA 4xxxx
	NetworkName_SOLANA_MAINNET_MAINNET NetworkName = 40000
	NetworkName_SOLANA_TESTNET_TESTNET NetworkName = 40001
)

var NetworkName_name = map[int32]string{
	0:     "NO_NETWORK",
	10000: "BITCOIN_MAINNET_MAINNET",
	10001: "BITCOIN_TESTNET_TESTNET",
	20000: "ETHEREUM_MAINNET_MAINNET",
	20001: "ETHEREUM_TESTNET_GOERLI",
	20002: "ETHEREUM_TESTNET_SEPOLIA",
	20003: "POLYGON_MAINNET_MAINNET",
	20004: "POLYGON_TESTNET_MUMBAI",
	20005: "BNB_MAINNET_MAINNET",
	20006: "BNB_TESTNET_TESTNET",
	20007: "AVALANCHE_MAINNET_CCHAIN",
	20008: "AVALANCHE_TESTNET_FUJI",
	20009: "GNOSIS_MAINNET_MAINNET",
	20010: "GNOSIS_TESTNET_CHIADO",
	20011: "OPTIMISM_MAINNET_MAINNET",
	20012: "OPTIMISM_TESTNET_GOERLI",
	20013: "ARBITRUM_MAINNET_MAINNET",
	20014: "ARBITRUM_TESTNET_GOERLI",
	20017: "SHARDEUM_BETANET_SPHINX",
	20019: "ZETA_TESTNET_ATHENS",
	30000: "APTOS_MAINNET_MAINNET",
	30001: "APTOS_TESTNET_TESTNET",
	30002: "SUI_MAINNET_MAINNET",
	30003: "SUI_TESTNET_TESTNET",
	40000: "SOLANA_MAINNET_MAINNET",
	40001: "SOLANA_TESTNET_TESTNET",
}

var NetworkName_value = map[string]int32{
	"NO_NETWORK":               0,
	"BITCOIN_MAINNET_MAINNET":  10000,
	"BITCOIN_TESTNET_TESTNET":  10001,
	"ETHEREUM_MAINNET_MAINNET": 20000,
	"ETHEREUM_TESTNET_GOERLI":  20001,
	"ETHEREUM_TESTNET_SEPOLIA": 20002,
	"POLYGON_MAINNET_MAINNET":  20003,
	"POLYGON_TESTNET_MUMBAI":   20004,
	"BNB_MAINNET_MAINNET":      20005,
	"BNB_TESTNET_TESTNET":      20006,
	"AVALANCHE_MAINNET_CCHAIN": 20007,
	"AVALANCHE_TESTNET_FUJI":   20008,
	"GNOSIS_MAINNET_MAINNET":   20009,
	"GNOSIS_TESTNET_CHIADO":    20010,
	"OPTIMISM_MAINNET_MAINNET": 20011,
	"OPTIMISM_TESTNET_GOERLI":  20012,
	"ARBITRUM_MAINNET_MAINNET": 20013,
	"ARBITRUM_TESTNET_GOERLI":  20014,
	"SHARDEUM_BETANET_SPHINX":  20017,
	"ZETA_TESTNET_ATHENS":      20019,
	"APTOS_MAINNET_MAINNET":    30000,
	"APTOS_TESTNET_TESTNET":    30001,
	"SUI_MAINNET_MAINNET":      30002,
	"SUI_TESTNET_TESTNET":      30003,
	"SOLANA_MAINNET_MAINNET":   40000,
	"SOLANA_TESTNET_TESTNET":   40001,
}

func (x NetworkName) String() string {
	return proto.EnumName(NetworkName_name, int32(x))
}

func (NetworkName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9c4aafa085c4431e, []int{0}
}

func init() {
	proto.RegisterEnum("mycel.registry.NetworkName", NetworkName_name, NetworkName_value)
}

func init() { proto.RegisterFile("mycel/registry/network_name.proto", fileDescriptor_9c4aafa085c4431e) }

var fileDescriptor_9c4aafa085c4431e = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xc7, 0xe3, 0x0e, 0x1d, 0x0e, 0xa9, 0x3a, 0x19, 0x41, 0x41, 0x14, 0x4b, 0xac, 0x48, 0x24,
	0x03, 0x9f, 0xe0, 0xec, 0x1e, 0xf1, 0x81, 0xfd, 0x9c, 0xe5, 0xbb, 0xf0, 0xd2, 0x25, 0x4a, 0x8b,
	0x55, 0x22, 0x70, 0x5c, 0xa5, 0x46, 0x90, 0x6f, 0xc0, 0x58, 0x76, 0x0f, 0xbc, 0xbf, 0x83, 0x28,
	0x5d, 0x3a, 0xc2, 0xc6, 0xd8, 0x91, 0x11, 0x25, 0x5b, 0x3e, 0x05, 0x8a, 0x2f, 0xe7, 0x04, 0x5f,
	0x27, 0xcb, 0xfa, 0xdd, 0xef, 0xee, 0x79, 0xfe, 0x8f, 0x1e, 0x74, 0x25, 0x1d, 0xed, 0x24, 0x8f,
	0x5a, 0xc3, 0x64, 0xb7, 0xbf, 0x9f, 0x0f, 0x47, 0xad, 0x41, 0x92, 0x3f, 0xc9, 0x86, 0x0f, 0xbb,
	0x83, 0x5e, 0x9a, 0x34, 0xf7, 0x86, 0x59, 0x9e, 0xd9, 0x6b, 0xe5, 0x91, 0xa6, 0x3e, 0x72, 0xf5,
	0xd9, 0x2a, 0x3a, 0x03, 0xea, 0x18, 0xf4, 0xd2, 0xc4, 0x5e, 0x43, 0x08, 0x78, 0x17, 0xa8, 0xbc,
	0xc3, 0xe3, 0x5b, 0xb8, 0x61, 0x6f, 0xa0, 0x75, 0x97, 0x49, 0x8f, 0x33, 0xe8, 0x86, 0x84, 0x01,
	0x50, 0xa9, 0xbf, 0xf8, 0x00, 0x96, 0xa9, 0xa4, 0x42, 0xce, 0xe8, 0xfc, 0x8b, 0x9f, 0x83, 0xed,
	0xa0, 0x0b, 0x54, 0xfa, 0x34, 0xa6, 0x9d, 0xd0, 0x90, 0x5f, 0x14, 0x96, 0x7d, 0x19, 0xad, 0x57,
	0x5c, 0xeb, 0x6d, 0x4e, 0xe3, 0x80, 0xe1, 0x97, 0x85, 0xf5, 0x9f, 0xae, 0xb1, 0xa0, 0x11, 0x0f,
	0x18, 0xc1, 0xaf, 0x94, 0x1e, 0xf1, 0xe0, 0x5e, 0x9b, 0x9b, 0xa5, 0xbd, 0x2e, 0x2c, 0x7b, 0x03,
	0x9d, 0xd7, 0x58, 0xdb, 0x61, 0x27, 0x74, 0x09, 0xc3, 0x6f, 0x0a, 0xcb, 0xbe, 0x88, 0xce, 0xba,
	0xe0, 0x1a, 0xe2, 0xdb, 0x05, 0xaa, 0x37, 0xf4, 0x4e, 0x95, 0x44, 0x6e, 0x93, 0x80, 0x80, 0xe7,
	0xd3, 0xca, 0xf5, 0x3c, 0x9f, 0x30, 0xc0, 0xef, 0xd5, 0x9b, 0x0b, 0xae, 0x2f, 0xb8, 0xd1, 0xb9,
	0xc9, 0xf0, 0x07, 0x45, 0xdb, 0xc0, 0x05, 0x13, 0xc6, 0xb3, 0x1f, 0x0b, 0xcb, 0xbe, 0x84, 0xce,
	0xcd, 0xa9, 0x16, 0x3d, 0x9f, 0x91, 0x4d, 0x8e, 0x3f, 0xa9, 0x87, 0x79, 0x24, 0x59, 0xc8, 0x84,
	0x19, 0xe5, 0x67, 0x95, 0x45, 0xc5, 0x6b, 0x51, 0x7e, 0x99, 0xd7, 0x1d, 0xbb, 0x4c, 0xc6, 0xa7,
	0x4c, 0xe2, 0xab, 0xd2, 0x2b, 0x5e, 0xd3, 0xbf, 0x29, 0x2c, 0x7c, 0x12, 0x6f, 0xce, 0x26, 0xe1,
	0x52, 0x49, 0xca, 0x49, 0x44, 0x3e, 0x83, 0xbb, 0xf8, 0x50, 0x05, 0xb6, 0x45, 0x25, 0xa9, 0x4c,
	0x22, 0x7d, 0x0a, 0x02, 0x1f, 0xa9, 0xa6, 0x48, 0x24, 0xb9, 0xd9, 0xf1, 0xf7, 0xe9, 0x12, 0xac,
	0x47, 0x7d, 0x38, 0x2d, 0x2f, 0x15, 0x1d, 0x66, 0x78, 0x3f, 0x16, 0xa8, 0x6e, 0x1d, 0x4d, 0xcb,
	0x88, 0x05, 0x0f, 0x08, 0x10, 0x43, 0xfc, 0x79, 0xbc, 0xb2, 0x44, 0xeb, 0xee, 0xaf, 0xe3, 0x15,
	0xd7, 0xff, 0x3d, 0x76, 0xac, 0x93, 0xb1, 0x63, 0xfd, 0x1d, 0x3b, 0xd6, 0xc1, 0xc4, 0x69, 0x9c,
	0x4c, 0x9c, 0xc6, 0x9f, 0x89, 0xd3, 0xd8, 0x6a, 0xee, 0xf6, 0xf3, 0x07, 0x8f, 0xb7, 0x9b, 0x3b,
	0x59, 0xda, 0x2a, 0xf7, 0xe7, 0xda, 0xfd, 0x2c, 0xed, 0xf5, 0x07, 0xea, 0xa7, 0xf5, 0x74, 0xb1,
	0x71, 0xf9, 0x68, 0x2f, 0xd9, 0xdf, 0x5e, 0x2d, 0x77, 0xed, 0xfa, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb4, 0x5f, 0x85, 0x7e, 0x90, 0x03, 0x00, 0x00,
}
