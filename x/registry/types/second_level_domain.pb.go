// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycel/registry/second_level_domain.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DnsRecord struct {
	DnsRecordType DnsRecordType `protobuf:"varint,1,opt,name=dnsRecordType,proto3,enum=mycel.registry.DnsRecordType" json:"dnsRecordType,omitempty"`
	Value         string        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DnsRecord) Reset()         { *m = DnsRecord{} }
func (m *DnsRecord) String() string { return proto.CompactTextString(m) }
func (*DnsRecord) ProtoMessage()    {}
func (*DnsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a2ae6361ebd509, []int{0}
}
func (m *DnsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DnsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DnsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DnsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsRecord.Merge(m, src)
}
func (m *DnsRecord) XXX_Size() int {
	return m.Size()
}
func (m *DnsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DnsRecord proto.InternalMessageInfo

func (m *DnsRecord) GetDnsRecordType() DnsRecordType {
	if m != nil {
		return m.DnsRecordType
	}
	return DnsRecordType_NO_RECORD_TYPE
}

func (m *DnsRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type WalletRecord struct {
	WalletRecordType NetworkName `protobuf:"varint,1,opt,name=walletRecordType,proto3,enum=mycel.registry.NetworkName" json:"walletRecordType,omitempty"`
	Value            string      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *WalletRecord) Reset()         { *m = WalletRecord{} }
func (m *WalletRecord) String() string { return proto.CompactTextString(m) }
func (*WalletRecord) ProtoMessage()    {}
func (*WalletRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a2ae6361ebd509, []int{1}
}
func (m *WalletRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletRecord.Merge(m, src)
}
func (m *WalletRecord) XXX_Size() int {
	return m.Size()
}
func (m *WalletRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WalletRecord proto.InternalMessageInfo

func (m *WalletRecord) GetWalletRecordType() NetworkName {
	if m != nil {
		return m.WalletRecordType
	}
	return NetworkName_NO_NETWORK
}

func (m *WalletRecord) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Metadata struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a2ae6361ebd509, []int{2}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Metadata) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Record struct {
	// Types that are valid to be assigned to Record:
	//
	//	*Record_DnsRecord
	//	*Record_WalletRecord
	//	*Record_Metadata
	Record isRecord_Record `protobuf_oneof:"record"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a2ae6361ebd509, []int{3}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

type isRecord_Record interface {
	isRecord_Record()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Record_DnsRecord struct {
	DnsRecord *DnsRecord `protobuf:"bytes,1,opt,name=dnsRecord,proto3,oneof" json:"dnsRecord,omitempty"`
}
type Record_WalletRecord struct {
	WalletRecord *WalletRecord `protobuf:"bytes,2,opt,name=walletRecord,proto3,oneof" json:"walletRecord,omitempty"`
}
type Record_Metadata struct {
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (*Record_DnsRecord) isRecord_Record()    {}
func (*Record_WalletRecord) isRecord_Record() {}
func (*Record_Metadata) isRecord_Record()     {}

func (m *Record) GetRecord() isRecord_Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Record) GetDnsRecord() *DnsRecord {
	if x, ok := m.GetRecord().(*Record_DnsRecord); ok {
		return x.DnsRecord
	}
	return nil
}

func (m *Record) GetWalletRecord() *WalletRecord {
	if x, ok := m.GetRecord().(*Record_WalletRecord); ok {
		return x.WalletRecord
	}
	return nil
}

func (m *Record) GetMetadata() *Metadata {
	if x, ok := m.GetRecord().(*Record_Metadata); ok {
		return x.Metadata
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Record) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Record_DnsRecord)(nil),
		(*Record_WalletRecord)(nil),
		(*Record_Metadata)(nil),
	}
}

type SecondLevelDomain struct {
	Name           string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent         string           `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Owner          string           `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	ExpirationDate time.Time        `protobuf:"bytes,4,opt,name=expirationDate,proto3,stdtime" json:"expirationDate"`
	Records        []*Record        `protobuf:"bytes,5,rep,name=records,proto3" json:"records,omitempty"`
	AccessControl  []*AccessControl `protobuf:"bytes,6,rep,name=accessControl,proto3" json:"accessControl,omitempty"`
}

func (m *SecondLevelDomain) Reset()         { *m = SecondLevelDomain{} }
func (m *SecondLevelDomain) String() string { return proto.CompactTextString(m) }
func (*SecondLevelDomain) ProtoMessage()    {}
func (*SecondLevelDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a2ae6361ebd509, []int{4}
}
func (m *SecondLevelDomain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecondLevelDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecondLevelDomain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecondLevelDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecondLevelDomain.Merge(m, src)
}
func (m *SecondLevelDomain) XXX_Size() int {
	return m.Size()
}
func (m *SecondLevelDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_SecondLevelDomain.DiscardUnknown(m)
}

var xxx_messageInfo_SecondLevelDomain proto.InternalMessageInfo

func (m *SecondLevelDomain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecondLevelDomain) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *SecondLevelDomain) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *SecondLevelDomain) GetExpirationDate() time.Time {
	if m != nil {
		return m.ExpirationDate
	}
	return time.Time{}
}

func (m *SecondLevelDomain) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *SecondLevelDomain) GetAccessControl() []*AccessControl {
	if m != nil {
		return m.AccessControl
	}
	return nil
}

func init() {
	proto.RegisterType((*DnsRecord)(nil), "mycel.registry.DnsRecord")
	proto.RegisterType((*WalletRecord)(nil), "mycel.registry.WalletRecord")
	proto.RegisterType((*Metadata)(nil), "mycel.registry.Metadata")
	proto.RegisterType((*Record)(nil), "mycel.registry.Record")
	proto.RegisterType((*SecondLevelDomain)(nil), "mycel.registry.SecondLevelDomain")
}

func init() {
	proto.RegisterFile("mycel/registry/second_level_domain.proto", fileDescriptor_71a2ae6361ebd509)
}

var fileDescriptor_71a2ae6361ebd509 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x3d, 0x6f, 0xd3, 0x40,
	0x1c, 0xc6, 0xed, 0xbe, 0x84, 0xe4, 0x52, 0xa2, 0x72, 0xaa, 0x2a, 0x13, 0xc0, 0x09, 0x61, 0xc9,
	0x82, 0x8d, 0x82, 0x84, 0xc4, 0x48, 0x1a, 0x89, 0x0c, 0xa5, 0xc3, 0x51, 0x09, 0x89, 0x25, 0xba,
	0xd8, 0xff, 0x1a, 0xab, 0xf6, 0x9d, 0x75, 0xbe, 0x34, 0xf5, 0xb7, 0xe8, 0xcc, 0x27, 0x2a, 0x5b,
	0x47, 0x26, 0x40, 0xc9, 0x17, 0x41, 0xbe, 0xb3, 0x5b, 0xc7, 0x55, 0xb6, 0x7b, 0xe4, 0xdf, 0xf3,
	0x7f, 0xd3, 0x63, 0x34, 0x8c, 0x33, 0x0f, 0x22, 0x57, 0x40, 0x10, 0xa6, 0x52, 0x64, 0x6e, 0x0a,
	0x1e, 0x67, 0xfe, 0x2c, 0x82, 0x2b, 0x88, 0x66, 0x3e, 0x8f, 0x69, 0xc8, 0x9c, 0x44, 0x70, 0xc9,
	0x71, 0x47, 0x91, 0x4e, 0x49, 0x76, 0x8f, 0x02, 0x1e, 0x70, 0xf5, 0xc9, 0xcd, 0x5f, 0x9a, 0xea,
	0xf6, 0x02, 0xce, 0x83, 0x08, 0x5c, 0xa5, 0xe6, 0x8b, 0x0b, 0x57, 0x86, 0x31, 0xa4, 0x92, 0xc6,
	0x49, 0x09, 0xd4, 0x1a, 0xfa, 0x2c, 0x9d, 0x09, 0xf0, 0xb8, 0xf0, 0x0b, 0xe0, 0x75, 0x0d, 0x60,
	0x20, 0x97, 0x5c, 0x5c, 0xce, 0x18, 0x8d, 0xa1, 0x40, 0xde, 0xd4, 0x10, 0xea, 0x79, 0x90, 0xa6,
	0x33, 0x8f, 0x33, 0x29, 0x78, 0xa4, 0xa1, 0xc1, 0x05, 0x6a, 0x4d, 0x58, 0x4a, 0x54, 0x69, 0x7c,
	0x82, 0x9e, 0xfa, 0xa5, 0x38, 0xcf, 0x12, 0xb0, 0xcc, 0xbe, 0x39, 0xec, 0x8c, 0x5e, 0x39, 0x9b,
	0x4b, 0x39, 0x93, 0x2a, 0x44, 0x36, 0x3d, 0xf8, 0x08, 0xed, 0x5f, 0xd1, 0x68, 0x01, 0xd6, 0x4e,
	0xdf, 0x1c, 0xb6, 0x88, 0x16, 0x83, 0x18, 0x1d, 0x7c, 0xa3, 0x51, 0x04, 0xb2, 0x68, 0xf5, 0x19,
	0x1d, 0x2e, 0x2b, 0xba, 0xd2, 0xed, 0x45, 0xbd, 0xdb, 0x99, 0x5e, 0xed, 0x8c, 0xc6, 0x40, 0x1e,
	0x99, 0xb6, 0xb4, 0x1b, 0xa1, 0xe6, 0x17, 0x90, 0xd4, 0xa7, 0x92, 0xe2, 0x43, 0xb4, 0x7b, 0x09,
	0x99, 0xaa, 0xde, 0x22, 0xf9, 0x73, 0x8b, 0xe7, 0x97, 0x89, 0x1a, 0xc5, 0x74, 0x1f, 0x51, 0xeb,
	0x7e, 0x29, 0x65, 0x6c, 0x8f, 0x9e, 0x6f, 0x3d, 0xc2, 0xd4, 0x20, 0x0f, 0x34, 0x1e, 0xa3, 0x83,
	0xea, 0x8c, 0xaa, 0x45, 0x7b, 0xf4, 0xb2, 0xee, 0xae, 0x1e, 0x63, 0x6a, 0x90, 0x0d, 0x0f, 0xfe,
	0x80, 0x9a, 0x71, 0x31, 0xbd, 0xb5, 0xab, 0xfc, 0x56, 0xdd, 0x5f, 0x6e, 0x37, 0x35, 0xc8, 0x3d,
	0x3b, 0x6e, 0xa2, 0x86, 0x0e, 0xc9, 0xe0, 0xe7, 0x0e, 0x7a, 0xf6, 0x55, 0x85, 0xf4, 0x34, 0xcf,
	0xe8, 0x44, 0x45, 0x14, 0x63, 0xb4, 0x97, 0xe7, 0xa3, 0x38, 0x85, 0x7a, 0xe3, 0x63, 0xd4, 0x48,
	0xa8, 0x00, 0x26, 0x8b, 0x63, 0x14, 0x2a, 0xbf, 0x11, 0x5f, 0x32, 0x10, 0x6a, 0x80, 0x16, 0xd1,
	0x02, 0x9f, 0xa2, 0x0e, 0x5c, 0x27, 0xa1, 0xa0, 0x32, 0xe4, 0x6c, 0x42, 0x25, 0x58, 0x7b, 0x6a,
	0xbe, 0xae, 0xa3, 0x13, 0xed, 0x94, 0x89, 0x76, 0xce, 0xcb, 0x44, 0x8f, 0x9b, 0xb7, 0x7f, 0x7a,
	0xc6, 0xcd, 0xdf, 0x9e, 0x49, 0x6a, 0x5e, 0xfc, 0x0e, 0x3d, 0xd1, 0xf3, 0xa6, 0xd6, 0x7e, 0x7f,
	0x77, 0xd8, 0x1e, 0x1d, 0xd7, 0xd7, 0xd4, 0x07, 0x21, 0x25, 0x96, 0x27, 0x54, 0xc7, 0xf8, 0x44,
	0xa7, 0xd8, 0x6a, 0x28, 0xdf, 0xa3, 0x84, 0x7e, 0xaa, 0x42, 0x64, 0xd3, 0x33, 0x9e, 0xde, 0xae,
	0x6c, 0xf3, 0x6e, 0x65, 0x9b, 0xff, 0x56, 0xb6, 0x79, 0xb3, 0xb6, 0x8d, 0xbb, 0xb5, 0x6d, 0xfc,
	0x5e, 0xdb, 0xc6, 0x77, 0x27, 0x08, 0xe5, 0x8f, 0xc5, 0xdc, 0xf1, 0x78, 0xec, 0xaa, 0x8a, 0x6f,
	0xf5, 0xcf, 0xad, 0x85, 0x7b, 0xfd, 0xf0, 0x33, 0xc9, 0x2c, 0x81, 0x74, 0xde, 0x50, 0xeb, 0xbe,
	0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xaa, 0x35, 0x84, 0x91, 0x20, 0x04, 0x00, 0x00,
}

func (m *DnsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DnsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DnsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.DnsRecordType != 0 {
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(m.DnsRecordType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.WalletRecordType != 0 {
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(m.WalletRecordType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size := m.Record.Size()
			i -= size
			if _, err := m.Record.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Record_DnsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_DnsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DnsRecord != nil {
		{
			size, err := m.DnsRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecondLevelDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Record_WalletRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_WalletRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WalletRecord != nil {
		{
			size, err := m.WalletRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecondLevelDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Record_Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record_Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecondLevelDomain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SecondLevelDomain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecondLevelDomain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecondLevelDomain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccessControl) > 0 {
		for iNdEx := len(m.AccessControl) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessControl[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecondLevelDomain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecondLevelDomain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ExpirationDate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationDate):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintSecondLevelDomain(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSecondLevelDomain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecondLevelDomain(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecondLevelDomain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DnsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsRecordType != 0 {
		n += 1 + sovSecondLevelDomain(uint64(m.DnsRecordType))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	return n
}

func (m *WalletRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletRecordType != 0 {
		n += 1 + sovSecondLevelDomain(uint64(m.WalletRecordType))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	return n
}

func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	return n
}

func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		n += m.Record.Size()
	}
	return n
}

func (m *Record_DnsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DnsRecord != nil {
		l = m.DnsRecord.Size()
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	return n
}
func (m *Record_WalletRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WalletRecord != nil {
		l = m.WalletRecord.Size()
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	return n
}
func (m *Record_Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	return n
}
func (m *SecondLevelDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSecondLevelDomain(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ExpirationDate)
	n += 1 + l + sovSecondLevelDomain(uint64(l))
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovSecondLevelDomain(uint64(l))
		}
	}
	if len(m.AccessControl) > 0 {
		for _, e := range m.AccessControl {
			l = e.Size()
			n += 1 + l + sovSecondLevelDomain(uint64(l))
		}
	}
	return n
}

func sovSecondLevelDomain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecondLevelDomain(x uint64) (n int) {
	return sovSecondLevelDomain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DnsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecondLevelDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DnsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DnsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRecordType", wireType)
			}
			m.DnsRecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DnsRecordType |= DnsRecordType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecondLevelDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecondLevelDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRecordType", wireType)
			}
			m.WalletRecordType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletRecordType |= NetworkName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecondLevelDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecondLevelDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecondLevelDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecondLevelDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DnsRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Record = &Record_DnsRecord{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WalletRecord{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Record = &Record_WalletRecord{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Metadata{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Record = &Record_Metadata{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecondLevelDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecondLevelDomain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecondLevelDomain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecondLevelDomain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecondLevelDomain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ExpirationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Record{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessControl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessControl = append(m.AccessControl, &AccessControl{})
			if err := m.AccessControl[len(m.AccessControl)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecondLevelDomain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecondLevelDomain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecondLevelDomain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecondLevelDomain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecondLevelDomain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecondLevelDomain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecondLevelDomain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecondLevelDomain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecondLevelDomain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecondLevelDomain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecondLevelDomain = fmt.Errorf("proto: unexpected end of group")
)
