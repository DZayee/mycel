// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycel/furnace/epoch_burn_config.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EpochBurnConfig struct {
	EpochIdentifier             string        `protobuf:"bytes,1,opt,name=epochIdentifier,proto3" json:"epochIdentifier,omitempty"`
	CurrentBurnAmountIdentifier uint64        `protobuf:"varint,2,opt,name=currentBurnAmountIdentifier,proto3" json:"currentBurnAmountIdentifier,omitempty"`
	StartTime                   time.Time     `protobuf:"bytes,3,opt,name=startTime,proto3,stdtime" json:"startTime" yaml:"start_time"`
	Duration                    time.Duration `protobuf:"bytes,4,opt,name=duration,proto3,stdduration" json:"duration,omitempty" yaml:"duration"`
}

func (m *EpochBurnConfig) Reset()         { *m = EpochBurnConfig{} }
func (m *EpochBurnConfig) String() string { return proto.CompactTextString(m) }
func (*EpochBurnConfig) ProtoMessage()    {}
func (*EpochBurnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_85095d78ef169197, []int{0}
}
func (m *EpochBurnConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochBurnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochBurnConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochBurnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochBurnConfig.Merge(m, src)
}
func (m *EpochBurnConfig) XXX_Size() int {
	return m.Size()
}
func (m *EpochBurnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochBurnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EpochBurnConfig proto.InternalMessageInfo

func (m *EpochBurnConfig) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *EpochBurnConfig) GetCurrentBurnAmountIdentifier() uint64 {
	if m != nil {
		return m.CurrentBurnAmountIdentifier
	}
	return 0
}

func (m *EpochBurnConfig) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *EpochBurnConfig) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func init() {
	proto.RegisterType((*EpochBurnConfig)(nil), "mycel.furnace.EpochBurnConfig")
}

func init() {
	proto.RegisterFile("mycel/furnace/epoch_burn_config.proto", fileDescriptor_85095d78ef169197)
}

var fileDescriptor_85095d78ef169197 = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x4b, 0xf3, 0x30,
	0x1c, 0x6f, 0xf6, 0x8c, 0x07, 0x57, 0x91, 0x61, 0xf1, 0x30, 0x27, 0xa6, 0xa3, 0x20, 0xf4, 0xe0,
	0x1a, 0xd4, 0x9b, 0x27, 0xad, 0x8a, 0x78, 0x1d, 0x03, 0xc1, 0xcb, 0x68, 0xbb, 0xb4, 0x0b, 0x2c,
	0x49, 0xc9, 0x12, 0xb0, 0xdf, 0x62, 0x47, 0x3f, 0x8e, 0xc7, 0x1d, 0x77, 0xf4, 0x54, 0x65, 0xbb,
	0x79, 0xdc, 0x27, 0x90, 0xa6, 0xeb, 0x94, 0x09, 0xde, 0xf2, 0xcf, 0xef, 0x35, 0x2f, 0xe6, 0x09,
	0xcd, 0x22, 0x3c, 0x46, 0xb1, 0x12, 0x2c, 0x88, 0x30, 0xc2, 0x29, 0x8f, 0x46, 0x83, 0x50, 0x09,
	0x36, 0x88, 0x38, 0x8b, 0x49, 0xe2, 0xa5, 0x82, 0x4b, 0x6e, 0xed, 0x69, 0x9a, 0xb7, 0xa6, 0xb5,
	0x0f, 0x12, 0x9e, 0x70, 0x8d, 0xa0, 0x62, 0x55, 0x92, 0xda, 0x30, 0xe1, 0x3c, 0x19, 0x63, 0xa4,
	0xa7, 0x50, 0xc5, 0x68, 0xa8, 0x44, 0x20, 0x09, 0x67, 0x6b, 0xdc, 0xde, 0xc6, 0x25, 0xa1, 0x78,
	0x22, 0x03, 0x9a, 0x96, 0x04, 0xe7, 0xb5, 0x66, 0x36, 0xef, 0x8a, 0x06, 0xbe, 0x12, 0xec, 0x46,
	0xe7, 0x5b, 0xae, 0xd9, 0xd4, 0xa5, 0x1e, 0x86, 0x98, 0x49, 0x12, 0x13, 0x2c, 0x5a, 0xa0, 0x03,
	0xdc, 0x46, 0x6f, 0x7b, 0xdb, 0xba, 0x32, 0x8f, 0x22, 0x25, 0x04, 0x66, 0xb2, 0x90, 0x5f, 0x53,
	0xae, 0x98, 0xfc, 0xa1, 0xaa, 0x75, 0x80, 0x5b, 0xef, 0xfd, 0x45, 0xb1, 0x1e, 0xcd, 0xc6, 0x44,
	0x06, 0x42, 0xf6, 0x09, 0xc5, 0xad, 0x7f, 0x1d, 0xe0, 0xee, 0x9e, 0xb7, 0xbd, 0xb2, 0xb4, 0x57,
	0x95, 0xf6, 0xfa, 0x55, 0x69, 0xff, 0x78, 0x96, 0xdb, 0xc6, 0x2a, 0xb7, 0xf7, 0xb3, 0x80, 0x8e,
	0x2f, 0x1d, 0x2d, 0x1d, 0x14, 0x67, 0x72, 0xa6, 0xef, 0x36, 0xe8, 0x7d, 0x7b, 0x59, 0x23, 0x73,
	0xa7, 0xba, 0x8b, 0x56, 0x5d, 0xfb, 0x1e, 0xfe, 0xf2, 0xbd, 0x5d, 0x13, 0xfc, 0xb3, 0xc2, 0xf6,
	0x33, 0xb7, 0xad, 0x4a, 0x72, 0xca, 0x29, 0x91, 0x98, 0xa6, 0x32, 0x5b, 0xe5, 0x76, 0xb3, 0x0c,
	0xab, 0x30, 0xe7, 0xa5, 0x88, 0xda, 0xb8, 0xfb, 0xf7, 0xb3, 0x05, 0x04, 0xf3, 0x05, 0x04, 0x1f,
	0x0b, 0x08, 0xa6, 0x4b, 0x68, 0xcc, 0x97, 0xd0, 0x78, 0x5b, 0x42, 0xe3, 0xa9, 0x9b, 0x10, 0x39,
	0x52, 0xa1, 0x17, 0x71, 0x8a, 0xf4, 0x6b, 0x76, 0x87, 0x9c, 0x06, 0x84, 0x95, 0x03, 0x7a, 0xde,
	0xfc, 0x01, 0x99, 0xa5, 0x78, 0x12, 0xfe, 0xd7, 0xc5, 0x2e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x91, 0xcc, 0x10, 0x39, 0x21, 0x02, 0x00, 0x00,
}

func (m *EpochBurnConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochBurnConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochBurnConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintEpochBurnConfig(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintEpochBurnConfig(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.CurrentBurnAmountIdentifier != 0 {
		i = encodeVarintEpochBurnConfig(dAtA, i, uint64(m.CurrentBurnAmountIdentifier))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintEpochBurnConfig(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpochBurnConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpochBurnConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochBurnConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovEpochBurnConfig(uint64(l))
	}
	if m.CurrentBurnAmountIdentifier != 0 {
		n += 1 + sovEpochBurnConfig(uint64(m.CurrentBurnAmountIdentifier))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovEpochBurnConfig(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovEpochBurnConfig(uint64(l))
	return n
}

func sovEpochBurnConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpochBurnConfig(x uint64) (n int) {
	return sovEpochBurnConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochBurnConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpochBurnConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochBurnConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochBurnConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochBurnConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpochBurnConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpochBurnConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBurnAmountIdentifier", wireType)
			}
			m.CurrentBurnAmountIdentifier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochBurnConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentBurnAmountIdentifier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochBurnConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochBurnConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochBurnConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpochBurnConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpochBurnConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpochBurnConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpochBurnConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpochBurnConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpochBurnConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpochBurnConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochBurnConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpochBurnConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpochBurnConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpochBurnConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpochBurnConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpochBurnConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpochBurnConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpochBurnConfig = fmt.Errorf("proto: unexpected end of group")
)
